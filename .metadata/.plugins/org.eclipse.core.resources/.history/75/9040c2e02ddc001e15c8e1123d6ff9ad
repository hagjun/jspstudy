<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>JSTL</title>
</head>
<body>
<%-- 
	JSTL(JSP Standard Tag Library) 
	1. 라이브러리 다운받아서 해당 프로젝트에 넣기 (tomcat.apache.org)
	2. 다운받은 4개의 파일을 WEB-INF 안에 lib 폴더를 만들어서 넣어주자. 
	3. JSTL을 사용하기 위해서는 지시어 중 taglib 지시어 선언하고 사용한다. (보통은 page 지시어 밑에 사용)
		코어  : <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		포맷팅 : <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
	4. 사용법  : 코어 = <c:사용명령어>, 포맷팅 = <fmt:사용명령어>
--%>
	<%-- 1. 변수생성 및 데이터 저장 : 디폴트는 pageContext 에 저장 --%>
	<%-- 변수생성 명령어 (set) => <c:set var="변수명" value="데이터값" ></c:set> --%>
	<c:set var="str" value="Hello JSTL!!" />
	 
	<%-- 변수출력 명령어 (out) => <c:out value="출력할 데이터 또는 EL사용"/> --%>
	<c:out value="str"/> <br> <%-- str 문자열 출력 --%>
	<c:out value="${str }"/> <br> <%-- 변수값 str 출력 --%>
	
	<%-- pageContext에 저장되기 때문에 EL 사용 가능 --%>
	${str }
	
	<%-- 변수 삭제 (remove) --%>
	<c:remove var="str"/><%-- 변수 str --%>
	<c:out value="${str }"/>
	${str } <br>
	<hr>
	
	<%--
		if 문 : else 가 없다. 조건식이 참일 때 만 실행
		<c:if test="조건식(관계연산, 비교연산, 논리연산 -> EL방식으로 작성) var="변수""></c:if>
			조건식이 참일때 실행할 문장
	 --%>	
	<c:if test="${4>3}" >
		<h2>결과 : 참이라서 실행</h2>
	</c:if>
	<hr>
	
	<c:if test="${4<3}" >
		<h2>결과 : 거짓이라서 실행불가</h2>
	</c:if>
	<hr>
	
	<%-- avg 가 80 이상이면 합격 >=(ge) --%>
	<c:set var="avg" value="90" />
	<%-- <c:if test="${avg >= 80 }"> --%>
	<c:if test="${avg ge 80 }">
		<h3>결과 : 합격</h3>
	</c:if>
	<hr>
	
	<%--
		if 문은 else 가 없어서 불편하다.
		대신에 choose 문 사용한다.
		switch 문과 비슷하다.
		c:otherwise => default 와 같다.
		
		<c:choose>
			<c:when test="조건식(관계연산, 비교연산, 논리연산 -> EL방식으로 작성)">참일때 실행</c:when>
			<c:when test="조건식(관계연산, 비교연산, 논리연산 -> EL방식으로 작성)">참일때 실행</c:when>
			<c:when test="조건식(관계연산, 비교연산, 논리연산 -> EL방식으로 작성)">참일때 실행</c:when>
			<c:otherwise>위의 조건이 맞지 않았을 때 (즉, 나머지)</c:otherwise>
		</c:choose>	
	 --%>
	 
	 <%-- avg 가 80 이상이면 합격 >=(ge) --%>
	 <c:set var="avg" value="77"></c:set>
	<c:choose>
		<c:when test="${avg ge 80 }">
			<h3>합격</h3>
		</c:when>
		<c:otherwise>
			<h3>불합격</h3>
		</c:otherwise>
	</c:choose>
	<hr>
	
	<%-- avg2 가 90이상이면 A학점, 80이상이면 B학점, 70이상이면 C학점, 나머지 F학점 
		** 정수는 정수와 비교, 실수는 실수와 비교해야 된다.	
	--%>	
	<c:set var="avg2" value="89.4"></c:set>
	<c:choose>
		<c:when test="${avg2 ge 90.0 }">
			<h3>A학점</h3>
		</c:when>
		<c:when test="${avg2 ge 80.0 }">
			<h3>B학점</h3>
		</c:when>
		<c:when test="${avg2 ge 70.0 }">
			<h3>C학점</h3>
		</c:when>
		<c:otherwise>
			<h3>F학점</h3>
		</c:otherwise>
	</c:choose>
	<hr>
	<%-- for 문
			1. 일반적인 for 문
				<c:forEach begin="시작값" end="끝값" step="증가/감소" 
				var="안에서 사용할 변수" varStatus="변수상태값"></c:forEach>
			2. 개선된 for 문
	 --%>		
	<h2>10~20까지 출력</h2>
	<c:forEach begin="10" end="20" step="1" var="k" varStatus="vs">
		${k} <br>
	</c:forEach>	
</body>
</html>















































